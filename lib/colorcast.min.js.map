{"version":3,"sources":["webpack://colorcast/webpack/universalModuleDefinition","webpack://colorcast/webpack/bootstrap","webpack://colorcast/./node_modules/color-name/index.js","webpack://colorcast/./node_modules/color-convert/conversions.js","webpack://colorcast/./src/index.js","webpack://colorcast/./node_modules/color/index.js","webpack://colorcast/./node_modules/color-string/index.js","webpack://colorcast/./node_modules/simple-swizzle/index.js","webpack://colorcast/./node_modules/is-arrayish/index.js","webpack://colorcast/./node_modules/color-convert/index.js","webpack://colorcast/./node_modules/color-convert/route.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","cssKeywords","reverseKeywords","convert","rgb","channels","labels","hsl","hsv","hwb","cmyk","xyz","lab","lch","hex","keyword","ansi16","ansi256","hcg","apple","model","Error","length","comparativeDistance","x","y","Math","pow","h","g","b","min","max","delta","k","reversed","currentClosestKeyword","currentClosestDistance","Infinity","distance","z","t1","t2","t3","val","smin","lmin","v","hi","floor","f","q","sl","vmin","wh","bl","ratio","a","y2","x2","z2","atan2","PI","sqrt","hr","cos","sin","args","arguments","round","ansi","color","mult","rem","string","toString","toUpperCase","substring","match","colorString","split","map","char","join","integer","parseInt","grayscale","hue","chroma","mg","pure","w","_color","_interopRequireDefault","keySat","keyVal","ColorCast","config","_classCallCheck","this","_config","_huePoints","_namedConfigs","_validateConfig","hueIn","leftHue","reduce","acc","next","rightHue","reduceRight","denomiator","factor","leftConfig","rightConfig","interpolated","_arr2","Array","from","_i2","configName","leftSettings","rightSettings","settings","_arr3","_i3","component","newColor","default","saturationv","parsedColor","fromHue","namedConfigs","_this","_typeof","huePointSet","Set","hues","keys","_loop","hueValue","Number","isNaN","concat","names","undefined","setA","setB","diff","_toConsumableArray","_arr","_i","elem","delete","difference","size","_loop2","compValue","_i5","add","_i4","apply","newMin","newMax","sort","_slice","slice","skippedModels","hashedModelKeys","forEach","limiters","Color","obj","valpha","result","newArr","zeroArray","splice","indexOf","alpha","hashedKeys","JSON","stringify","push","limit","freeze","getset","channel","modifier","isArray","maxfn","arr","toJSON","places","self","to","percentString","percent","array","unitArray","unitObject","num","toFixed","roundTo","roundToPlace","saturationl","lightness","wblack","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","isDark","isLight","negate","lighten","darken","saturate","desaturate","whiten","blacken","fade","opaquer","rotate","degrees","mix","mixinColor","weight","color1","w1","w2","newAlpha","assertArray","raw","colorNames","swizzle","reverseNames","cs","clamp","hexDouble","str","toLowerCase","hexAlpha","i2","parseFloat","rgba","hsla","hwba","isArrayish","results","len","arg","wrap","fn","Function","getOwnPropertyDescriptor","constructor","conversions","route","fromModel","routes","toModel","wrappedFn","conversion","wrapRounded","wrapRaw","deriveBFS","graph","models","parent","buildGraph","queue","current","pop","adjacents","adjacent","node","unshift","link","wrapConversion","path","cur"],"mappings":"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","file":"colorcast.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"colorcast\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"colorcast\"] = factory();\n\telse\n\t\troot[\"colorcast\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar v;\n\n\tif (max === 0) {\n\t\ts = 0;\n\t} else {\n\t\ts = (delta / max * 1000) / 10;\n\t}\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tv = ((max / 255) * 1000) / 10;\n\n\treturn [h, s, v];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","import Color from 'color';\n\nconst keySat = 'saturation';\nconst keyVal = 'value';\n\nfunction difference(setA, setB) {\n  let diff = new Set([...setA, ...setB]);\n  for (let elem of Array.from(setB)) {\n    diff.delete(elem);\n  }\n  return diff;\n}\n\nclass ColorCast {\n  constructor(config) {\n    this._config = {};\n    this._huePoints = [];\n    this._namedConfigs = [];\n    this._validateConfig(config);\n  }\n\n  fromHue(hueIn) {\n    let hue = ((hueIn % 360) + 360) % 360;\n    let leftHue = this._huePoints.reduce(\n      (acc, next) => (next <= hue ? next : acc)\n    );\n    let rightHue = this._huePoints.reduceRight(\n      (acc, next) => (next >= hue ? next : acc)\n    );\n\n    let numerator = hue - leftHue;\n    let denomiator = rightHue - leftHue;\n    let factor = numerator / denomiator;\n\n    // If the denomiator is 0 that means left and right hue are the same.\n    // So the left and right config will be the same so any factor from 0 -> 1 will give the same results.\n    if (denomiator === 0) {\n      factor = 1;\n    }\n\n    let leftConfig = this._config[leftHue];\n    let rightConfig = this._config[rightHue];\n    let interpolated = {};\n\n    for (let configName of Array.from(this._namedConfigs)) {\n      let leftSettings = leftConfig[configName];\n      let rightSettings = rightConfig[configName];\n      let settings = {};\n\n      for (let component of [keySat, keyVal]) {\n        settings[component] =\n          (rightSettings[component] - leftSettings[component]) * factor +\n          leftSettings[component];\n      }\n\n      let newColor = new Color();\n      newColor = newColor.hue(hue);\n      newColor = newColor.saturationv(settings[keySat]);\n      newColor = newColor.value(settings[keyVal]);\n\n      interpolated[configName] = newColor.hex();\n    }\n\n    return interpolated;\n  }\n\n  fromColor(color) {\n    let parsedColor = new Color(color);\n    return this.fromHue(parsedColor.hue());\n  }\n\n  _validateConfig(config) {\n    if (typeof config !== 'object') {\n      throw new Error('Config must be an object.');\n    }\n\n    let namedConfigs;\n    let huePointSet = new Set([]);\n    let hues = Object.keys(config);\n\n    if (hues.length < 1) {\n      throw new Error('Must have at least one hue in the configuration.');\n    }\n\n    for (let hue of hues) {\n      let hueValue = Number(hue);\n\n      if (Number.isNaN(hueValue)) {\n        throw new Error(\n          `Hues must be numbers. Got ${hue} which is not a number.`\n        );\n      }\n\n      if (hueValue < 0 || hueValue >= 360) {\n        throw new Error(`Hue values must be >= 0 and < 360. Got ${hueValue}`);\n      }\n\n      if (typeof config[hue] !== 'object') {\n        throw new Error(\n          `Hue config entries must be objects. Got ${typeof config[\n            hue\n          ]} instead.`\n        );\n      }\n\n      let names = Object.keys(config[hue]);\n      if (namedConfigs === undefined) {\n        namedConfigs = new Set(names);\n      } else {\n        let dif = difference(names, namedConfigs);\n        if (dif.size > 0) {\n          throw new Error(\n            'Config for hue does not have consistant config names.'\n          );\n        }\n      }\n\n      for (let name of names) {\n        [keySat, keyVal].map(component => {\n          let compValue = Number(config[hue][name][component]);\n\n          if (Number.isNaN(compValue)) {\n            throw new Error(\n              `Value of ${component} must be a number. ${hue}:${name}:${component} is ${compValue}.`\n            );\n          }\n\n          if (compValue < 0 || compValue > 100) {\n            throw new Error(\n              `Value of ${component} must be in the range of 0 to 100. ${hue}:${name}:${component} is ${compValue}.`\n            );\n          }\n        });\n      }\n\n      this._namedConfigs = Array.from(namedConfigs);\n      huePointSet.add(hueValue);\n      this._config[hueValue] = config[hue];\n    }\n\n    let min = Math.min(...huePointSet);\n    let max = Math.max(...huePointSet);\n\n    let newMin = max - 360;\n    huePointSet.add(newMin);\n    this._config[newMin] = this._config[max];\n\n    let newMax = min + 360;\n    huePointSet.add(newMax);\n    this._config[newMax] = this._config[min];\n\n    this._huePoints = Array.from(huePointSet).sort((a, b) => a - b); // For ascending sort\n  }\n}\n\nexport default ColorCast;\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (!obj) {\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n"],"sourceRoot":""}